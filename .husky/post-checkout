#!/bin/bash

# Get the new HEAD commit hash (3rd argument passed to post-checkout hook)
new_head="$3"

# If it's not a branch checkout (e.g., file checkout), exit
if [ "$new_head" -eq 0 ]; then
  exit 0
fi

# Define the target directory
DEMO_DIR="apps/demo"
CONFIG_FILE=".branch-env-lookup"

# Check if the demo directory exists
if [ ! -d "$DEMO_DIR" ]; then
  echo "Warning: $DEMO_DIR directory not found!"
  exit 0
fi

# Change to the demo directory
cd "$DEMO_DIR" || exit 1

# Get the current branch name
current_branch=$(git symbolic-ref --short HEAD)

# Function to safely copy file contents
copy_env_file() {
  local source="$1"
  local dest="$2"

  # Check if source file exists
  if [ ! -f "$source" ]; then
    echo "Warning: Source file $source not found!"
    echo "Error: No valid env file found. Please check your .branch-env-lookup configuration."
    return 1
  fi

  # Create backup of current .env
  if [ -f "$dest" ]; then
    cp "$dest" "${dest}.last"
  fi

  # Copy the contents
  cp "$source" "$dest"
  echo "Updated $dest with $source"
}

# Function to get env file from config
get_env_file() {
  local branch="$1"
  local config_file="$2"
  local default_env=""
  local branch_env=""

  # Check if config file exists
  if [ ! -f "$config_file" ]; then
    echo "Warning: Config file $config_file not found!"
    return 1
  fi

  # Read the config file and find matching branch or default
  while IFS=' ' read -r pattern env_file || [ -n "$pattern" ]; do
    # Skip empty lines and comments
    [[ -z "$pattern" || "$pattern" =~ ^# ]] && continue

    # Store default if found
    if [ "$pattern" = ".default" ]; then
      default_env="$env_file"
      continue
    fi

    # Check for exact branch match
    if [ "$pattern" = "$branch" ]; then
      branch_env="$env_file"
      break
    fi
  done <"$config_file"

  # Return branch-specific env file if found, otherwise default
  if [ -n "$branch_env" ]; then
    echo "$branch_env"
  elif [ -n "$default_env" ]; then
    echo "$default_env"
  else
    return 1
  fi
}

# Get the appropriate env file from config
target_env=$(get_env_file "$current_branch" "$CONFIG_FILE")

if [ $? -eq 0 ] && [ -n "$target_env" ]; then
  copy_env_file "$target_env" ".env"
else
  echo "Warning: No matching env file found for branch $current_branch"
fi

# Return to the original directory
cd - >/dev/null || exit
